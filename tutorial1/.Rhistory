summary.rq(qr, se = "boot")
summary(qr, se = "boot")
summary(qr, se = "nid")
summary(qr, se = "boot")
summary.rq(qr)
summary(qr)
summary(qr, se = "nid")
summary.rq(qr, se = "nid")
summary.rq(qr, se = "boot")
summary(qr, se = "boot")
?summary.rq
View(qr)
?mvtnorm
rbind(c(1, 0.5), c(0.5, 1))
matrix(1, 1, 0, 4)
set.seed(777)
df <- fabricate(
N = 200,
Y = rpois(N, lambda = 4),
Z = rbinom(N, 1, prob = 0.4),
X1 = Z * rbinom(N, 1, prob = 0.8),
X2 = rnorm(N),
G = sample(letters[1:4], N, replace = TRUE)
)
iv <- feols(Y ~ X2 | X1 ~ Z, data = df, se = 'hetero')
iv
# Alsways set seed so you can replicate your results
set.seed(7)
df <- tibble(education = runif(1000, 5, 15)) %>%
mutate(wage_star = 500 + 150*education + rnorm(1000, 0, 100)) %>%
mutate(wage = ifelse(wage_star < 1500, 1500, wage_star))  %>%
arrange(desc(wage_star))
ols_model <- lm(wage ~ education, df)
tobit_model <- censReg(wage ~ education, data=df, left=1500)
df_pred <- tibble(education = df$education) %>%
mutate(wage_censored = ols_model[["coefficients"]]["(Intercept)"] +
education*ols_model[["coefficients"]]["education"]) %>%
mutate(wage_tobit = tobit_model[["estimate"]]["(Intercept)"] +
education*tobit_model[["estimate"]]["education"])
ggplot(data = df, aes(x = education, y = wage)) +
theme_light() +
geom_point(aes(color = 'dark grey')) +
geom_line(color = 'red', data = df_pred, aes(x = education, y = wage_censored, color = 'red')) +
geom_line(color = 'blue', data = df_pred, aes(x = education, y = wage_tobit, color = 'blue')) +
scale_color_manual(name = "", values = c("Observed data" = "dark grey",
"OLS" = "red",
"Tobit" = "blue"))
ggplot(dat, aes(x,y)) +
geom_point() +
geom_abline(intercept = ols_model[["coefficients"]]["(Intercept)"], slope = ols_model[["coefficients"]]["education"])
ggplot(dat, aes(x,y)) +
geom_point() +
ggplot(data = df, aes(x = education, y = wage)) +
theme_light() +
geom_point(aes(color = 'dark grey')) +
geom_abline(intercept = ols_model[["coefficients"]]["(Intercept)"], slope = ols_model[["coefficients"]]["education"]) +
scale_color_manual(name = "", values = c("Observed data" = "dark grey",
"OLS" = "red",
"Tobit" = "blue"))
ggplot(dat, aes(x,y)) +
geom_point() +
ggplot(data = df, aes(x = education, y = wage)) +
theme_light() +
geom_point(aes(color = 'dark grey')) +
geom_abline(intercept = ols_model[["coefficients"]]["(Intercept)"], slope = ols_model[["coefficients"]]["education"]) +
scale_color_manual(name = "", values = c("Observed data" = "dark grey",
"OLS" = "red",
"Tobit" = "blue"))
ggplot(data = df, aes(x = education, y = wage)) +
theme_light() +
geom_point(aes(color = 'dark grey')) +
geom_abline(intercept = ols_model[["coefficients"]]["(Intercept)"], slope = ols_model[["coefficients"]]["education"]) +
scale_color_manual(name = "", values = c("Observed data" = "dark grey",
"OLS" = "red",
"Tobit" = "blue"))
ggplot(data = df, aes(x = education, y = wage)) +
theme_light() +
geom_point(aes(color = 'dark grey')) +
geom_abline(intercept = ols_model[["coefficients"]]["(Intercept)"], slope = ols_model[["coefficients"]]["education"]) +
scale_color_manual(name = "", values = c("Observed data" = "dark grey",
"OLS" = "red",
"Tobit" = "blue"))
ggplot(data = df, aes(x = education, y = wage)) +
theme_light() +
geom_point(aes(color = 'dark grey')) +
geom_abline(intercept = ols_model[["coefficients"]]["(Intercept)"], slope = ols_model[["coefficients"]]["education"]) +
scale_color_manual(name = "", values = c("Observed data" = "dark grey",
"OLS" = "red",
"Tobit" = "blue"))
ggplot(data = df, aes(x = education, y = wage)) +
theme_light() +
geom_point(aes(color = 'dark grey')) +
geom_abline(intercept = ols_model[["coefficients"]]["(Intercept)"], slope = ols_model[["coefficients"]]["education"])
ggplot(data = df, aes(x = education, y = wage)) +
theme_light() +
geom_point(aes(color = 'dark grey')) +
geom_abline(intercept = ols_model[["coefficients"]]["(Intercept)"], slope = ols_model[["coefficients"]]["education"]) +
scale_color_manual(name = "", values = c("Observed data" = "dark grey",
"OLS" = "red",
"Tobit" = "blue"))
ggplot(data = df, aes(x = education, y = wage)) +
theme_light() +
geom_point(aes(color = 'dark grey')) +
geom_abline(color = 'red', intercept = ols_model[["coefficients"]]["(Intercept)"], slope = ols_model[["coefficients"]]["education"]) +
geom_abline(color = 'blue', intercept = tobit_model[["coefficients"]]["(Intercept)"], slope = tobit_model[["coefficients"]]["education"]) +
scale_color_manual(name = "", values = c("Observed data" = "dark grey",
"OLS" = "red",
"Tobit" = "blue"))
tobit_model[["coefficients"]]["education"]
tobit_model <- censReg(wage ~ education, data=df, left=1500)
tobit_model[["coefficients"]]["education"]
tobit_model[["coefficients"]]["(Intercept)"]
View(tobit_model)
View(ols_model)
ggplot(data = df, aes(x = education, y = wage)) +
theme_light() +
geom_point(aes(color = 'dark grey')) +
geom_abline(color = 'red', intercept = ols_model[["coefficients"]][["(Intercept)"]], slope = ols_model[["coefficients"]][["education"]]) +
geom_abline(color = 'blue', intercept = tobit_model[["estimate"]][["(Intercept)"]], slope = tobit_model[["estimate"]][["education"]]) +
scale_color_manual(name = "", values = c("Observed data" = "dark grey",
"OLS" = "red",
"Tobit" = "blue"))
ggplot(data = df, aes(x = education, y = wage)) +
theme_light() +
geom_point(aes(color = 'dark grey')) +
geom_line(color = 'red', data = df_pred, aes(x = education, y = wage_censored, color = 'red')) +
geom_line(color = 'blue', data = df_pred, aes(x = education, y = wage_tobit, color = 'blue')) +
scale_color_manual(name = "", values = c("Observed data" = "dark grey",
"OLS" = "red",
"Tobit" = "blue"))
ggplot(data = df, aes(x = education, y = wage)) +
theme_light() +
geom_point(aes(color = 'dark grey')) +
geom_abline(color = 'red', intercept = ols_model[["coefficients"]][["(Intercept)"]], slope = ols_model[["coefficients"]][["education"]]) +
geom_abline(color = 'blue', intercept = tobit_model[["estimate"]][["(Intercept)"]], slope = tobit_model[["estimate"]][["education"]]) +
scale_color_manual(name = "", values = c("Observed data" = "dark grey",
"OLS" = "red",
"Tobit" = "blue")) +
ylim(c(500, 3000)) +
ggplot(data = df, aes(x = education, y = wage)) +
theme_light() +
geom_point(aes(color = 'dark grey')) +
geom_line(color = 'red', data = df_pred, aes(x = education, y = wage_censored, color = 'red')) +
geom_line(color = 'blue', data = df_pred, aes(x = education, y = wage_tobit, color = 'blue')) +
scale_color_manual(name = "", values = c("Observed data" = "dark grey",
"OLS" = "red",
"Tobit" = "blue"))
ols_model[["coefficients"]][["(Intercept)"]]
ggplot(data = df, aes(x = education, y = wage)) +
theme_light() +
geom_point(aes(color = 'dark grey')) +
geom_abline(color = 'red', intercept = ols_model[["coefficients"]][["(Intercept)"]], slope = ols_model[["coefficients"]][["education"]]) +
geom_abline(color = 'blue', intercept = tobit_model[["estimate"]][["(Intercept)"]], slope = tobit_model[["estimate"]][["education"]]) +
scale_color_manual(name = "", values = c("Observed data" = "dark grey",
"OLS" = "red",
"Tobit" = "blue")) +
ylim(c(500, 3000))
ggplot(data = df, aes(x = education, y = wage)) +
theme_light() +
geom_point(aes(color = 'dark grey')) +
geom_abline(color = 'red', intercept = ols_model[["coefficients"]][["(Intercept)"]], slope = ols_model[["coefficients"]][["education"]]) +
geom_abline(color = 'blue', intercept = tobit_model[["estimate"]][["(Intercept)"]], slope = tobit_model[["estimate"]][["education"]]) +
scale_color_manual(name = "", values = c("Observed data" = "dark grey",
"OLS" = "red",
"Tobit" = "blue")) +
ylim(c(1000, 3000))
ggplot(data = df, aes(x = education, y = wage)) +
theme_light() +
geom_point(aes(color = 'dark grey')) +
geom_abline(color = 'red', intercept = ols_model[["coefficients"]][["(Intercept)"]], slope = ols_model[["coefficients"]][["education"]]) +
geom_abline(color = 'blue', intercept = tobit_model[["estimate"]][["(Intercept)"]], slope = tobit_model[["estimate"]][["education"]]) +
scale_color_manual(name = "", values = c("Observed data" = "dark grey",
"OLS" = "red",
"Tobit" = "blue")) +
ylim(c(1500, 3000))
ggplot(data = df, aes(x = education, y = wage)) +
theme_light() +
geom_point(aes(color = 'dark grey')) +
geom_line(color = 'red', data = df_pred, aes(x = education, y = wage_censored, color = 'red')) +
geom_line(color = 'blue', data = df_pred, aes(x = education, y = wage_tobit, color = 'blue')) +
scale_color_manual(name = "", values = c("Observed data" = "dark grey",
"OLS" = "red",
"Tobit" = "blue"))
ggplot(data = df, aes(x = education, y = wage)) +
theme_light() +
geom_point(aes(color = 'dark grey')) +
geom_abline(color = 'red', intercept = ols_model[["coefficients"]][["(Intercept)"]], slope = ols_model[["coefficients"]][["education"]]) +
geom_abline(color = 'blue', intercept = tobit_model[["estimate"]][["(Intercept)"]], slope = tobit_model[["estimate"]][["education"]]) +
scale_color_manual(name = "", values = c("Observed data" = "dark grey",
"OLS" = "red",
"Tobit" = "blue")) +
ylim(c(1500, 3000))
ggplot(data = df, aes(x = education, y = wage)) +
theme_light() +
geom_point(aes(color = 'dark grey')) +
geom_line(color = 'red', data = df_pred, aes(x = education, y = wage_censored, color = 'red')) +
geom_line(color = 'blue', data = df_pred, aes(x = education, y = wage_tobit, color = 'blue')) +
scale_color_manual(name = "", values = c("Observed data" = "dark grey",
"OLS" = "red",
"Tobit" = "blue"))
ggplot(data = df, aes(x = education, y = wage)) +
theme_light() +
geom_point(aes(color = 'dark grey')) +
geom_abline(color = 'red', intercept = ols_model[["coefficients"]][["(Intercept)"]], slope = ols_model[["coefficients"]][["education"]]) +
geom_abline(color = 'blue', intercept = tobit_model[["estimate"]][["(Intercept)"]], slope = tobit_model[["estimate"]][["education"]]) +
scale_color_manual(name = "", values = c("Observed data" = "dark grey",
"OLS" = "red",
"Tobit" = "blue")) +
ylim(c(1500, 3000))
ggplot(data = df, aes(x = education, y = wage)) +
theme_light() +
geom_point(aes(color = 'dark grey')) +
geom_line(color = 'red', data = df_pred, aes(x = education, y = wage_censored, color = 'red')) +
geom_line(color = 'blue', data = df_pred, aes(x = education, y = wage_tobit, color = 'blue')) +
scale_color_manual(name = "", values = c("Observed data" = "dark grey",
"OLS" = "red",
"Tobit" = "blue"))
ggplot(data = df, aes(x = education, y = wage)) +
theme_light() +
geom_point(aes(color = 'dark grey')) +
geom_abline(color = 'red', intercept = ols_model[["coefficients"]][["(Intercept)"]], slope = ols_model[["coefficients"]][["education"]]) +
geom_abline(color = 'blue', intercept = tobit_model[["estimate"]][["(Intercept)"]], slope = tobit_model[["estimate"]][["education"]]) +
scale_color_manual(name = "", values = c("Observed data" = "dark grey",
"OLS" = "red",
"Tobit" = "blue")) +
ylim(c(1000, 3000))
ggplot(data = df, aes(x = education, y = wage)) +
theme_light() +
geom_point(aes(color = 'dark grey')) +
geom_line(color = 'red', data = df_pred, aes(x = education, y = wage_censored, color = 'red')) +
geom_line(color = 'blue', data = df_pred, aes(x = education, y = wage_tobit, color = 'blue')) +
scale_color_manual(name = "", values = c("Observed data" = "dark grey",
"OLS" = "red",
"Tobit" = "blue"))
ggplot(data = df, aes(x = education, y = wage)) +
theme_light() +
geom_point(aes(color = 'dark grey')) +
geom_abline(color = 'red', intercept = ols_model[["coefficients"]][["(Intercept)"]], slope = ols_model[["coefficients"]][["education"]]) +
geom_abline(color = 'blue', intercept = tobit_model[["estimate"]][["(Intercept)"]], slope = tobit_model[["estimate"]][["education"]]) +
scale_color_manual(name = "", values = c("Observed data" = "dark grey",
"OLS" = "red",
"Tobit" = "blue")) +
ylim(c(1250, 3000))
ggplot(data = df, aes(x = education, y = wage)) +
theme_light() +
geom_point(aes(color = 'dark grey')) +
geom_line(color = 'red', data = df_pred, aes(x = education, y = wage_censored, color = 'red')) +
geom_line(color = 'blue', data = df_pred, aes(x = education, y = wage_tobit, color = 'blue')) +
scale_color_manual(name = "", values = c("Observed data" = "dark grey",
"OLS" = "red",
"Tobit" = "blue"))
ggplot(df, aes(x = education, y = wage)) +
theme_light() +
geom_point(aes(color = 'dark grey')) +
geom_abline(color = 'red', intercept = ols_model[["coefficients"]][["(Intercept)"]], slope = ols_model[["coefficients"]][["education"]]) +
geom_abline(color = 'blue', intercept = tobit_model[["estimate"]][["(Intercept)"]], slope = tobit_model[["estimate"]][["education"]]) +
ylim(c(1250, 3000)) +
scale_color_manual(name = "", values = c("Observed data" = "dark grey",
"OLS" = "red",
"Tobit" = "blue"))
?msummary
msummary(list(selection_equation, wage_equation), stars = TRUE, gof_omit = .*)
msummary(list(selection_equation, wage_equation), stars = TRUE, gof_omit = *)
msummary(list(selection_equation, wage_equation), stars = TRUE, gof_omit = '.*')
msummary(list(selection_equation, wage_equation), stars = TRUE, gof_omit = '^(?!R2|Num)')
msummary(list(selection_equation, wage_equation), stars = TRUE, gof_omit = '^(?!Num)')
ggplot(df, aes(x = education, y = wage)) +
theme_light() +
geom_point(aes(color = 'dark grey')) +
geom_abline(color = 'red', intercept = ols_model[["coefficients"]][["(Intercept)"]], slope = ols_model[["coefficients"]][["education"]]) +
geom_abline(color = 'blue', intercept = tobit_model[["estimate"]][["(Intercept)"]], slope = tobit_model[["estimate"]][["education"]]) +
ylim(c(1250, 3000)) +
scale_color_manual(name = "", values = c("Observed data" = "dark grey",
"OLS" = "red",
"Tobit" = "blue"))
ggplot(df, aes(x = education, y = wage)) +
theme_monomal() +
geom_point(aes(color = 'dark grey')) +
geom_abline(color = 'red', intercept = ols_model[["coefficients"]][["(Intercept)"]], slope = ols_model[["coefficients"]][["education"]]) +
geom_abline(color = 'blue', intercept = tobit_model[["estimate"]][["(Intercept)"]], slope = tobit_model[["estimate"]][["education"]]) +
ylim(c(1250, 3000)) +
scale_color_manual(name = "", values = c("Observed data" = "dark grey",
"OLS" = "red",
"Tobit" = "blue"))
ggplot(df, aes(x = education, y = wage)) +
theme_minimal() +
geom_point(aes(color = 'dark grey')) +
geom_abline(color = 'red', intercept = ols_model[["coefficients"]][["(Intercept)"]], slope = ols_model[["coefficients"]][["education"]]) +
geom_abline(color = 'blue', intercept = tobit_model[["estimate"]][["(Intercept)"]], slope = tobit_model[["estimate"]][["education"]]) +
ylim(c(1250, 3000)) +
scale_color_manual(name = "", values = c("Observed data" = "dark grey",
"OLS" = "red",
"Tobit" = "blue"))
ggplot(df, aes(x = education, y = wage)) +
theme_minimal() +
geom_point(aes(color = 'dark grey')) +
geom_abline(color = 'red', intercept = ols_model[["coefficients"]][["(Intercept)"]], slope = ols_model[["coefficients"]][["education"]]) +
geom_abline(color = 'blue', intercept = tobit_model[["estimate"]][["(Intercept)"]], slope = tobit_model[["estimate"]][["education"]]) +
ylim(c(1000, 3000)) +
scale_color_manual(name = "", values = c("Observed data" = "dark grey",
"OLS" = "red",
"Tobit" = "blue"))
ggplot(df, aes(x = education, y = wage)) +
theme_minimal() +
geom_point(aes(color = 'dark grey')) +
geom_abline(color = 'red', intercept = ols_model[["coefficients"]][["(Intercept)"]], slope = ols_model[["coefficients"]][["education"]]) +
geom_abline(color = 'blue', intercept = tobit_model[["estimate"]][["(Intercept)"]], slope = tobit_model[["estimate"]][["education"]]) +
ylim(c(1250, 3000)) +
scale_color_manual(name = "", values = c("Observed data" = "dark grey",
"OLS" = "red",
"Tobit" = "blue"))
ggplot(df, aes(x = education, y = wage)) +
theme_lightl() +
geom_point(aes(color = 'dark grey')) +
geom_abline(color = 'red', intercept = ols_model[["coefficients"]][["(Intercept)"]], slope = ols_model[["coefficients"]][["education"]]) +
geom_abline(color = 'blue', intercept = tobit_model[["estimate"]][["(Intercept)"]], slope = tobit_model[["estimate"]][["education"]]) +
ylim(c(1250, 3000)) +
scale_color_manual(name = "", values = c("Observed data" = "dark grey",
"OLS" = "red",
"Tobit" = "blue"))
ggplot(df, aes(x = education, y = wage)) +
theme_light() +
geom_point(aes(color = 'dark grey')) +
geom_abline(color = 'red', intercept = ols_model[["coefficients"]][["(Intercept)"]], slope = ols_model[["coefficients"]][["education"]]) +
geom_abline(color = 'blue', intercept = tobit_model[["estimate"]][["(Intercept)"]], slope = tobit_model[["estimate"]][["education"]]) +
ylim(c(1250, 3000)) +
scale_color_manual(name = "", values = c("Observed data" = "dark grey",
"OLS" = "red",
"Tobit" = "blue"))
ggplot(df, aes(x, y)) +
theme_light() +
geom_point() +
geom_smooth(method = "lm")
df <- fabricate(
N = 200,
Y = rpois(N, lambda = 4),
Z = rbinom(N, 1, prob = 0.4),
X1 = Z * rbinom(N, 1, prob = 0.8),
X2 = rnorm(N),
G = sample(letters[1:4], N, replace = TRUE)
)
set.seed(777)
df <- fabricate(
N = 200,
Y = rpois(N, lambda = 4),
Z = rbinom(N, 1, prob = 0.4),
X1 = Z * rbinom(N, 1, prob = 0.8),
X2 = rnorm(N),
G = sample(letters[1:4], N, replace = TRUE)
)
iv <- feols(Y ~ X2 | X1 ~ Z, data = df, se = 'hetero')
iv
df <- tibble(N = 200) %>%
mutate(Y = rpois(N, lambda = 4)) %>%
mutate(Z = rbinom(N, 1, prob = 0.4)) %>%
mutate(X1 = Z * rbinom(N, 1, prob = 0.8)) %>%
mutate(X2 = rnorm(N)) %>%
mutate(G = sample(letters[1:4], N, replace = TRUE))
?fabricate
df1 <- tibble(N = 200) %>%
mutate(Y = rpois(N, lambda = 4)) %>%
mutate(Z = rbinom(N, 1, prob = 0.4)) %>%
mutate(X1 = Z * rbinom(N, 1, prob = 0.8)) %>%
mutate(X2 = rnorm(N)) %>%
mutate(G = sample(letters[1:4], N, replace = TRUE))
rpois(N, lambda = 4)
?rpois
df1 <- tibble(N = 200) %>%
mutate(Y = rpois(200, lambda = 4)) %>%
mutate(Z = rbinom(N, 1, prob = 0.4)) %>%
mutate(X1 = Z * rbinom(N, 1, prob = 0.8)) %>%
mutate(X2 = rnorm(N)) %>%
mutate(G = sample(letters[1:4], N, replace = TRUE))
View(df)
sample(letters[1:4], 200, replace = TRUE)
rnorm(200)
rbinom(200, 1, prob = 0.8)
rbinom(200, 1, prob = 0.4)
rpois(200, lambda = 4)
df1 <- tibble(N = 200) %>%
mutate(Y = rpois(200, lambda = 4)) %>%
mutate(Z = rbinom(200, 1, prob = 0.4)) %>%
mutate(X1 = Z * rbinom(200, 1, prob = 0.8)) %>%
mutate(X2 = rnorm(200)) %>%
mutate(G = sample(letters[1:4], 200, replace = TRUE))
df1 <- tibble(Y = rpois(200, lambda = 4)) %>%
mutate(Z = rbinom(200, 1, prob = 0.4)) %>%
mutate(X1 = Z * rbinom(200, 1, prob = 0.8)) %>%
mutate(X2 = rnorm(200)) %>%
mutate(G = sample(letters[1:4], 200, replace = TRUE))
iv <- feols(Y ~ X2 | X1 ~ Z, data = df, se = 'hetero')
thef <- fitstat(iv, 'ivf', verbose = FALSE)$`ivf1::X1`$stat
iv
iv <- feols(Y ~ X2 | X1 ~ Z, data = df, se = 'hetero')
?fitstat
thef <- fitstat(iv, 'ivf', verbose = FALSE)$`ivf1::X1`$stat
iv
df <- tibble(Y = rpois(200, lambda = 4),
Z = rbinom(200, 1, prob = 0.4)) %>%
mutate(X1 = Z * rbinom(200, 1, prob = 0.8)) %>%
mutate(X2 = rnorm(200)) %>%
mutate(G = sample(letters[1:4], 200, replace = TRUE))
df <- tibble(Y = rpois(200, lambda = 4),
Z = rbinom(200, 1, prob = 0.4),
X1 = Z * rbinom(200, 1, prob = 0.8)) %>%
mutate(X2 = rnorm(200)) %>%
mutate(G = sample(letters[1:4], 200, replace = TRUE))
df <- tibble(Y = rpois(200, lambda = 4)) %>%
mutate(Z = rbinom(200, 1, prob = 0.4)) %>%
mutate(X1 = Z * rbinom(200, 1, prob = 0.8)) %>%
mutate(X2 = rnorm(200)) %>%
mutate(G = sample(letters[1:4], 200, replace = TRUE))
df <- tibble(Y = rpois(200, lambda = 4),
Z = rbinom(200, 1, prob = 0.4),
X1 = Z * rbinom(200, 1, prob = 0.8),
X2 = rnorm(200),
G = sample(letters[1:4], 200, replace = TRUE))
set.seed(777)
df <- tibble(Y = rpois(200, lambda = 4),
Z = rbinom(200, 1, prob = 0.4),
X1 = Z * rbinom(200, 1, prob = 0.8),
X2 = rnorm(200),
G = sample(letters[1:4], 200, replace = TRUE))
iv <- feols(Y ~ X2 | X1 ~ Z, data = df, se = 'hetero')
thef <- fitstat(iv, 'ivf', verbose = FALSE)$`ivf1::X1`$stat
iv
tb <- tibble(groups = sort(rep(1:10, 600)),
time = rep(sort(rep(1:6, 100)), 10),
Treated = I(groups > 5) * I(time > 3),
Y = groups + time + Treated*5 + rnorm(6000))
m <- feols(Y ~ Treated | groups + time, data = tb)
m
# Alsways set seed so you can replicate your results
set.seed(7)
df <- tibble(education = runif(1000, 5, 15),
wage_star = 500 + 150*education + rnorm(1000, 0, 100),
wage = ifelse(wage_star < 1500, 1500, wage_star))  %>%
arrange(desc(wage_star))
df <- tibble(z = runif(100),
x = runif(100),
uv = rmvnorm(100, mean = c(0, 0),
sigma = rbind(c(1, 0.5), c(0.5, 1))),
i_star = 4 - 5 * z + uv[, 1],
y_star = 6 - 3 * x + uv[, 2],
y = ifelse(i_star > 0, y_star, 0))
head(df)
set.seed(7)
df <- tibble(z = runif(100),
x = runif(100),
uv = rmvnorm(100, mean = c(0, 0),
sigma = rbind(c(1, 0.5), c(0.5, 1))),
i_star = 4 - 5 * z + uv[, 1],
y_star = 6 - 3 * x + uv[, 2],
y = ifelse(i_star > 0, y_star, 0))
head(df)
library(mvtnorm) # to simulate bivariate normal random variable
set.seed(7)
df <- tibble(z = runif(100),
x = runif(100),
uv = rmvnorm(100, mean = c(0, 0),
sigma = rbind(c(1, 0.5), c(0.5, 1))),
i_star = 4 - 5 * z + uv[, 1],
y_star = 6 - 3 * x + uv[, 2],
y = ifelse(i_star > 0, y_star, 0))
head(df)
y = ifelse(i_star > 0, y_star, 0)
df <- tibble(z = runif(100),
x = runif(100),
uv = rmvnorm(100, mean = c(0, 0),
sigma = rbind(c(1, 0.5), c(0.5, 1))),
i_star = 4 - 5 * z + uv[, 1],
y_star = 6 - 3 * x + uv[, 2],
y = ifelse(i_star > 0, y_star, 0))
# Create data where Z1 is valid and Z2 is invalid
df <- tibble(Z1 = rnorm(1000), Z2 = rnorm(1000),
X = Z1 + Z2 + rnorm(1000),
# True effect is 1
Y = X + Z2 + rnorm(1000))
iv <- feols(Y ~ 1 | X ~ Z1 + Z2, data = df, se = 'hetero')
fitstat(iv, 'sargan')
df <- tibble(x = seq(0, 100, length.out = 100),
# non-constant variance
sig = 0.1 + 0.05 * x,
y = 6 + 0.1 * x + rnorm(100,mean = 0, sd = sig))
```{r, echo=TRUE}
library(fixest)
tb <- tibble(groups = sort(rep(1:10, 600)),
time = rep(sort(rep(1:6, 100)), 10),
Treated = I(groups > 5) * I(time > 3),
Y = groups + time + Treated * 5 + rnorm(6000))
m <- feols(Y ~ Treated | groups + time, data = tb)
# Alsways set seed so you can replicate your results
set.seed(7)
df <- tibble(education = runif(1000, 5, 15),
wage_star = 500 + 150*education + rnorm(1000, 0, 100),
wage = ifelse(wage_star < 1500, 1500, wage_star))  %>%
arrange(desc(wage_star))
ols_model <- lm(wage ~ education, df)
tobit_model <- censReg(wage ~ education, df, left=1500)
View(df)
View(df)
library(censReg)
tobit_model <- censReg(wage ~ education, df, left = 1500)
tobit_model <- censReg(wage ~ education, df, left = 150)
tobit_model <- censReg(wage ~ education, df, right = 1500)
tobit_model <- censReg(wage ~ education, df, left = 1500, right = "Inf")
tobit_model <- censReg(wage ~ education, df, left = 1500)
tobit_model <- censReg(wage ~ education, data = df, left = 1500)
qr[["coefficients"]][["x"]]
# command to convert html slides to pdf (using package pagedown)
pagedown::chrome_print("tutorial1.html",output="tutorial1.pdf")
install.packages("pagedown")
